=====================
Python Problem Sets
=====================

.. Here is were you specify the content and order of your new book.

.. Each section heading (e.g. "SECTION 1: A Random Section") will be
   a heading in the table of contents. Source files that should be
   generated and included in that section should be placed on individual
   lines, with one line separating the first source filename and the
   :maxdepth: line.

.. Sources can also be included from subfolders of this directory.
   (e.g. "DataStructures/queues.rst").


SECTION 1: Simple Assignments
:::::::::::::::::::::::::::::

.. question:: sass1_q
   :number: 1

   .. tabbed:: sass1_tab

        .. tab:: Question

            .. activecode:: sass1

               Write code to create a variable ``score`` and make it refer to
               the integer 1.
               ~~~~
               ====
               from unittest.gui import TestCaseGui

               class myTests(TestCaseGui):

                  def testOne(self):
                     self.assertEqual(score, 1)
                     self.assertIs(type(score), int, "variable must refer to an int")

               myTests().main()

        .. tab:: Hint

           Remember that an assignment is a ``=`` with a variable on the left-hand
           side and a value or expression on the right-hand side.

        .. tab:: Answer

           .. activecode:: sass1_a
              :nocanvas:

              score = 1

.. question:: sass2_q

   .. tabbed:: sass2_tab

        .. tab:: Question

           .. activecode:: sass2

              Write code to create a variable ``temperature`` and make it refer to a floating point number.
              ~~~~
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                     self.assertIs(type(temperature), float, "variable must refer to a float")

              myTests().main()
        .. tab:: Hint

           A floating point number is a real number. I.e., it has a ``.`` in it.

        .. tab:: Answer

           .. activecode:: sass2_a
              :nocanvas:

              temperature = 57.3

.. question:: sass3_q

   .. tabbed:: sass3_tab

        .. tab:: Question

           .. activecode:: sass3

              Write code to create a variable ``name`` and make it refer to a string.
              ~~~~
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                     self.assertIs(type(name), str, "variable must refer to a string")

              myTests().main()

        .. tab:: Hint

           A string is enclosed by single or double quotes.

        .. tab:: Answer

           .. activecode:: sass3_a
              :nocanvas:

              name = "Desmond Tutu"


.. question:: sass4_q

   .. tabbed:: sass4_tab

        .. tab:: Question

           .. activecode:: sass4

              Write code to create a variable ``matches`` and make it refer to a boolean value.
              ~~~~
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                     self.assertIs(type(matches), bool, "variable must refer to a boolean")

              myTests().main()

        .. tab:: Hint

           The two booleans values are ``True`` and ``False``.

        .. tab:: Answer

           .. activecode:: sass4_a
              :nocanvas:

              matches = False


.. question:: sass5_q

   .. tabbed:: sass5_tab

        .. tab:: Question

           .. activecode:: sass5
              :include: sass2_a

              Assume the variable ``temperature`` has been initialized to some value.
              Write code to add 1 to the variable ``temperature``.
              ~~~~
              # replace this comment with your code
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                      self.assertAlmostEqual(temperature, 58.3)

              myTests().main()

        .. tab:: Hint

           The right-hand side of an equation is evaluated first, so you can take
           ``temperature`` and add 1 to it on the right-hand side, and then put
           ``temperature`` on the left-hand side of the ``=`` sign.

        .. tab:: Answer

           .. activecode:: sass5_a
              :nocanvas:

              temperature = temperature + 1
              # Also, could be written temperature += 1

.. raw:: html

   <div style='display:none;'>

.. activecode:: sass6_pre

   hours = 30.0
   hourly_rate = 11.50

.. raw:: html

   </div>

.. question:: sass6_q

   .. tabbed:: sass6_tab

        .. tab:: Question

           .. activecode:: sass6
              :include: sass6_pre

              Assume you have two variables ``hours`` and ``hourly_rate``.  Write code to compute the
              ``total_pay``, by multiplying ``hours`` and ``hourly_rate`` and storing in ``total_pay``.
              ~~~~
              # Assume hours and hourly_rate have been defined and given values.

              # replace this comment with your code
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                      self.assertAlmostEqual(total_pay, hours * hourly_rate)

              myTests().main()

        .. tab:: Hint

           Multiply ``hours`` and ``hourly_rate`` on the right-hand side of the assignment statement.

        .. tab:: Answer

           .. activecode:: sass6_a
              :nocanvas:

              total_pay = hours * hourly_rate
              
.. raw:: html

   <div style='display:none;'>

.. activecode:: sass7_pre

   p1_points = 17
   p2_points = 44

.. raw:: html

   </div>

.. question:: sass7_q

   .. tabbed:: sass7_tabs

        .. tab:: Question

           .. activecode:: sass7
              :include: sass7_pre

              Assume you have two variables ``p1_points`` and ``p2_points``.  Write a line of code
              to indicate that player p1 added all of player p2's points to her own.
              ~~~~
              # replace this comment with your code
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                      self.assertAlmostEqual(p1_points, 61)
                      self.assertAlmostEqual(p2_points, 44)

              myTests().main()

        .. tab:: Hint

           Your code needs to add ``p2_points`` to ``p1_points`` and make ``p1_points`` refer to the
           result.

        .. tab:: Answer

           .. activecode:: sass7_a
              :nocanvas:

              p1_points = p1_points + p2_points
              # or  p1_points = p2_points + p1_points

.. raw:: html

   <div style='display:none;'>

.. activecode:: sass8_pre

   ball1_direction = 17 

.. raw:: html

   </div>

.. question:: sass8_q

   .. tabbed:: sass8_tabs

        .. tab:: Question

           .. activecode:: sass8
              :include: sass8_pre

              Assume you have a variable ``ball1_direction``.  Write a line of code
              that set ball2's direction to be the same as ball1's direction.
              ~~~~
              # replace this comment with your code
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                      self.assertAlmostEqual(ball2_direction, ball1_direction)
                      self.assertAlmostEqual(ball1_direction, 17)

              myTests().main()

        .. tab:: Hint

           Your code creates variable ``ball2_direction`` on the left-hand side of the ``=``
           sign and sets it value to ``ball1_direction``.

        .. tab:: Answer

           .. activecode:: sass8_a
              :nocanvas:

              ball2_direction = ball1_direction

.. question:: sass9_q

   .. tabbed:: sass9_tabs

        .. tab:: Question

           Replace these statements with a single statement so that you don't use the variable ``y`` --
           just the variable ``x`` being set to a value.

           .. activecode:: sass9

              x = 7
              y = x + 1
              x = y
              ====
              from unittest.gui import TestCaseGui

              class myTests(TestCaseGui):

                  def testOne(self):
                      self.assertAlmostEqual(x, 8)

              myTests().main()

        .. tab:: Answer

           .. activecode:: sass9_a
              :nocanvas:

	           x = 8

.. question:: sass10_q

   .. tabbed:: sass10_tabs

        .. tab:: Question

           Before running the following code, predict what value will be printed.

           .. activecode:: sass10

              x = 7
              y = 9
              y = x
              x = 4
              print(y)

           If you don't understand the answer, using **CodeLens** might help.



SECTION 2: Input and Output
:::::::::::::::::::::::::::

.. question:: io1_q
   :number: 1

   .. tabbed:: io1_tabs

        .. tab:: Question

            .. activecode:: io1

               Write code to print ``Hello, World``
               ~~~~

        .. tab:: Hint

           Use the print() function, and remember that strings are surrounded by double-quotes or single-quotes.

        .. tab:: Answer

           .. activecode:: io1_a
              :nocanvas:

              print("Hello, World")
              # or print('Hello, World')

.. question:: io2_q

   .. tabbed:: io2_tabs

        .. tab:: Question

            .. activecode:: io2

               Write code to print

                  ``Hello``
                  
                  ``World``

               using 2 print statements.
               ~~~~

        .. tab:: Hint

           Call ``print()`` twice, on two consecutive lines.

        .. tab:: Answer

           .. activecode:: io2_a
              :nocanvas:

              print("Hello")
              print("World")


.. question:: io3_q

   .. tabbed:: io3_tabs

        .. tab:: Question

            .. activecode:: io3

               Write code to print

                  ``Hello``

               leaving the cursor on the same line.
               ~~~~

        .. tab:: Hint

           You have to use the optional parameter, ``end``, in the print statement.

        .. tab:: Answer

           .. activecode:: io3_a
              :nocanvas:

              print("Hello", end='')


.. question:: io4_q

   .. tabbed:: io4_tabs

        .. tab:: Question

            .. activecode:: io4

               Assume you have a variable ``ranking`` set to some integer value. 
               Write a line of code to print the value of ``ranking``.
               ~~~~
               ranking = 99
               # Replace this comment with your code
               ====

        .. tab:: Hint

           ``print()`` evaluates each variable or expression before printing it.

        .. tab:: Answer

           .. activecode:: io4_a
              :nocanvas:

              print(ranking)

.. question:: io5_q

   .. tabbed:: io5_tabs

        .. tab:: Question

            .. activecode:: io5

               Assume you have two variables ``ranking`` and ``average`` set to some values. 
               Write a line of code to print the values with a single space between.
               ~~~~
               ranking = 32
               average = 34
               # Replace this comment with your code.
               ====

        .. tab:: Hint

           The comma in ``print('x', 'y')`` will automatically insert a space between the two values

        .. tab:: Answer

           .. activecode:: io5_a
              :nocanvas:

              print(ranking, average)


.. question:: io6_q

   .. tabbed:: io6_tabs

        .. tab:: Question

            .. activecode:: io6

               Assume you have two variables ``start`` and ``interval``. Write a line of 
               code to print the sum of the two values.
               ~~~~
               start = 103233.1
               interval = 201787.33
               # Replace this comment with your code.
               ====

        .. tab:: Hint

           You can put expressions, like ``x + y`` into a ``print`` statement, too.

        .. tab:: Answer

           .. activecode:: io6_a
              :nocanvas:

              print(start + interval)

.. question:: io7_q

   .. tabbed:: io7_tabs

        .. tab:: Question

            .. activecode:: io7

               Assume you have a variable ``ranking`` set to some integer value.  
               Write a line of code to print ``Ranking:`` followed by 
               the value that ``ranking`` refers to.  Note that there should be 
               one ``space`` between the ``:`` and the value.
               E.g., if ``ranking`` was 7, the output would be ``Ranking: 7``.
               ~~~~
               ranking = 7
               # Replace this comment with your code.
               ====

        .. tab:: Hint

           Remember, the comma in a ``print`` adds a space, so be careful!

        .. tab:: Answer

           .. activecode:: io7_a
              :nocanvas:

              print('Ranking:', ranking)

Question 8:

Assume you have 






SECTION 1: Introduction
:::::::::::::::::::::::

Congratulations!   If you can see this file you have probably successfully run the ``runestone init`` command.  If you are looking at this as a source file you should now run ``runestone build``  to generate html files.   Once you have run the build command you can run ``runestone serve`` and then view this in your browser at ``http://localhost:8000``

This is just a sample of what you can do.  The index.rst file is the table of contents for your entire project.  You can put all of your writing in the index, or  you can include additional rst files.  Those files may even be in subdirectories that you can reference using a relative path.


::


   .. toctree::
      :maxdepth: 2

      some/path/myfile.rst


Section 2: Links
::::::::::::::::

Runestone uses the ``restructuredText`` (rst) markup language.  We chose this over markdown largely because rst is extensible.  Nearly all of the basic markup tasks are already handled by restructuredText.  You should check out the docs for the basics of restructuredText (link below). Our extensions are all for the interactive elements.  One key hint about restructuredText:  Its like **Python** -- *indentation matters!*

* `restructuredText Docs <http://docutils.sourceforge.net/rst.html>`_
* `Runestone Docs <http://runestoneinteractive.org/build/html/index.html>`_
* Join the discussion on our `Google Group <https://groups.google.com/forum/#!forum/runestone_instructors>`_
* Tell us about problems on `Github <https://github.com/RunestoneInteractive/RunestoneComponents>`_



SECTION 3: Sample Directives
::::::::::::::::::::::::::::

ActiveCode
----------

.. activecode:: codeexample1
   :coach:
   :caption: This is a caption

   print("My first program adds a list of numbers")
   myList = [2, 4, 6, 8, 10]
   total = 0
   for num in myList:
       total = total + num
   print(total)

Multiple Choice
---------------

.. mchoice:: question1_2
    :multiple_answers:
    :correct: a,b,d
    :answer_a: red
    :answer_b: yellow
    :answer_c: black
    :answer_d: green
    :feedback_a: Red is a definitely on of the colors.
    :feedback_b: Yes, yellow is correct.
    :feedback_c: Remember the acronym...ROY G BIV.  B stands for blue.
    :feedback_d: Yes, green is one of the colors.

    Which colors might be found in a rainbow? (choose all that are correct)

These are just two of the many interactive components for writing online course materials.  You can see examples of all of them `On our Example Page <http://interactivepython.org/runestone/static/overview/overview.html>`_

Now feel free to modify this file to start creating your own interactive page.

